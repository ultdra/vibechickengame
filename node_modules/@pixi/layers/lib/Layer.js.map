{"version":3,"file":"Layer.js","sources":["../src/Layer.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { Group } from './Group';\nimport { settings, Rectangle, RenderTexture, Renderer } from '@pixi/core';\n\nimport type { DisplayObject, IDestroyOptions } from '@pixi/display';\nimport type { Stage } from './Stage';\nimport type { ILayeredRenderer } from './RendererMixin';\n\n/**\n * This manages the render-texture a {@link Layer} renders into.\n *\n * This is used internally by {@link Layer#render}.\n * @memberof PIXI.layers\n */\nexport class LayerTextureCache\n{\n    constructor(public layer: Layer) {}\n\n    private renderTexture: RenderTexture = null;\n    private doubleBuffer: Array<RenderTexture> = null;\n    private currentBufferIndex = 0;\n    _tempRenderTarget: RenderTexture = null;\n    _tempRenderTargetSource = new Rectangle();\n    _tempRenderTargetDestination = new Rectangle();\n\n    private init(renderer?: Renderer): void\n    {\n        const width = renderer ? renderer.screen.width : 100;\n        const height = renderer ? renderer.screen.height : 100;\n        const resolution = renderer ? renderer.resolution : settings.RESOLUTION;\n\n        this.renderTexture = RenderTexture.create({ width, height, resolution });\n\n        if (this.layer.group.useDoubleBuffer)\n        {\n            this.doubleBuffer = [\n                RenderTexture.create({ width, height, resolution }),\n                RenderTexture.create({ width, height, resolution })\n            ];\n        }\n    }\n\n    /** See {@link Layer#getRenderTexture}. */\n    getRenderTexture(): RenderTexture\n    {\n        if (!this.renderTexture)\n        {\n            this.init();\n        }\n\n        return this.renderTexture;\n    }\n\n    /** Prepares the layer's render-texture and set it as the render-target. */\n    pushTexture(renderer: Renderer): void\n    {\n        // TODO: take not screen, but offset screen, in case there's matrix transform\n        const screen = renderer.screen;\n\n        if (!this.renderTexture)\n        {\n            this.init(renderer);\n        }\n\n        const rt = this.renderTexture;\n        const group = this.layer.group;\n        const db = this.doubleBuffer;\n\n        if (rt.width !== screen.width\n            || rt.height !== screen.height\n            || rt.baseTexture.resolution !== renderer.resolution)\n        {\n            rt.baseTexture.resolution = renderer.resolution;\n            rt.resize(screen.width, screen.height);\n\n            if (db)\n            {\n                db[0].baseTexture.resolution = renderer.resolution;\n                db[0].resize(screen.width, screen.height);\n                db[1].baseTexture.resolution = renderer.resolution;\n                db[1].resize(screen.width, screen.height);\n            }\n        }\n\n        if (db)\n        {\n            db[0].framebuffer.multisample = rt.framebuffer.multisample;\n            db[1].framebuffer.multisample = rt.framebuffer.multisample;\n        }\n\n        this._tempRenderTarget = renderer.renderTexture.current;\n        this._tempRenderTargetSource.copyFrom(renderer.renderTexture.sourceFrame);\n        this._tempRenderTargetDestination.copyFrom(renderer.renderTexture.destinationFrame);\n\n        renderer.batch.flush();\n\n        if (group.useDoubleBuffer)\n        {\n            // double-buffer logic\n            let buffer = db[this.currentBufferIndex];\n\n            if (!(buffer.baseTexture as any)._glTextures[renderer.CONTEXT_UID])\n            {\n                renderer.renderTexture.bind(buffer, undefined, undefined);\n                renderer.texture.bind(buffer);\n                if (group.clearColor)\n                {\n                    renderer.renderTexture.clear(group.clearColor as any);\n                }\n            }\n            renderer.texture.unbind(rt.baseTexture);\n            (rt.baseTexture as any)._glTextures = (buffer.baseTexture as any)._glTextures;\n            (rt.baseTexture as any).framebuffer = (buffer.baseTexture as any).framebuffer;\n\n            buffer = db[1 - this.currentBufferIndex];\n            renderer.renderTexture.bind(buffer, undefined, undefined);\n        }\n        else\n        {\n            // simple logic\n            renderer.renderTexture.bind(rt, undefined, undefined);\n        }\n\n        if (group.clearColor)\n        {\n            renderer.renderTexture.clear(group.clearColor as any);\n        }\n\n        // fix for filters\n        const filterStack = renderer.filter.defaultFilterStack;\n\n        if (filterStack.length > 1)\n        {\n            filterStack[filterStack.length - 1].renderTexture = renderer.renderTexture.current;\n        }\n    }\n\n    /** Flushes the renderer and restores the old render-target. */\n    popTexture(renderer: Renderer): void\n    {\n        renderer.batch.flush();\n        renderer.framebuffer.blit();\n        // switch filters back\n        const filterStack = renderer.filter.defaultFilterStack;\n\n        if (filterStack.length > 1)\n        {\n            filterStack[filterStack.length - 1].renderTexture = this._tempRenderTarget;\n        }\n        renderer.renderTexture.bind(this._tempRenderTarget,\n            this._tempRenderTargetSource, this._tempRenderTargetDestination);\n        this._tempRenderTarget = null;\n\n        const rt = this.renderTexture;\n        const group = this.layer.group;\n        const db = this.doubleBuffer;\n\n        if (group.useDoubleBuffer)\n        {\n            renderer.texture.unbind(rt.baseTexture);\n            this.currentBufferIndex = 1 - this.currentBufferIndex;\n\n            const buffer = db[this.currentBufferIndex];\n\n            (rt.baseTexture as any)._glTextures = (buffer.baseTexture as any)._glTextures;\n            (rt.baseTexture as any).framebuffer = (buffer.baseTexture as any).framebuffer;\n        }\n    }\n\n    /** Destroy the texture-cache. Set {@link Layer.textureCache} to {@code null} after destroying it! */\n    destroy(): void\n    {\n        if (this.renderTexture)\n        {\n            this.renderTexture.destroy();\n            if (this.doubleBuffer)\n            {\n                this.doubleBuffer[0].destroy(true);\n                this.doubleBuffer[1].destroy(true);\n            }\n        }\n    }\n}\n\n/**\n * A {@link Layer layer} can be used to render {@link PIXI.DisplayObject}s in a different part of the scene graph together.\n *\n * A layer can be used to structure a scene graph in a data-oriented manner and separate the z-ordering hierarchy in\n * a different tree. Each layer is associated with a {@link Group} that provides the context for sorting objects\n * in the same layer.\n *\n * All layers must be placed underneath a {@link Stage} - generally, you should assign a {@link Stage} as your\n * scene's root.\n * @memberof PIXI.layers\n */\nexport class Layer extends Container\n{\n    /** Flags that this container is a layer! */\n    public readonly isLayer = true;\n\n    /** The group of {@link DisplayObject}s that are rendered within this layer */\n    public group: Group = null;\n\n    /** The texture manager used when rendering into a {@link Layer#useRenderTexture layer render-texture}. */\n    public textureCache: LayerTextureCache;\n\n    _activeChildren: Array<DisplayObject> = [];\n    _tempChildren: Array<DisplayObject> = null;\n    _activeStageParent: Stage = null;\n    _sortedChildren: Array<DisplayObject> = [];\n    _tempLayerParent: Layer = null;\n\n    insertChildrenBeforeActive = true;\n    insertChildrenAfterActive = true;\n\n    /**\n     * @param group - The group of {@link DisplayObject}s to be rendered by this layer.\n     */\n    constructor(group: Group = null)\n    {\n        super();\n\n        if (group)\n        {\n            this.group = group;\n            this.zIndex = group.zIndex;\n        }\n        else\n        {\n            this.group = new Group(0, false);\n        }\n\n        this._tempChildren = this.children;\n    }\n\n    /**\n     * Flags whether this layer should render into a render-texture.\n     *\n     * This is useful if you want to use the layer as a texture elsewhere - for example, in sprites or to apply\n     * filters. The layer's render-texture is resized to the size of the renderer's screen.\n     */\n    get useRenderTexture(): boolean\n    {\n        return this.group.useRenderTexture;\n    }\n    set useRenderTexture(value: boolean)\n    {\n        this.group.useRenderTexture = value;\n    }\n\n    /**\n     * This will enable double buffering for this layer.\n     *\n     * This layer will keep two render-textures to render into - choosing one each frame on a flip-flop\n     * basis. This is useful when you\n     *\n     * **Caveat**: You must enable {@link Layer#useRenderTexture} to prevent framebuffer errors in rendering.\n     */\n    get useDoubleBuffer(): boolean\n    {\n        return this.group.useDoubleBuffer;\n    }\n    set useDoubleBuffer(value: boolean)\n    {\n        this.group.useDoubleBuffer = value;\n    }\n\n    /**\n     * The background color to clear the layer.\n     *\n     * This should be used when {@link Layer#useRenderTexture} is enabled.\n     */\n    get clearColor(): ArrayLike<number>\n    {\n        return this.group.clearColor;\n    }\n    set clearColor(value: ArrayLike<number>)\n    {\n        this.group.clearColor = value;\n    }\n\n    get sortPriority(): number\n    {\n        return this.group.sortPriority;\n    }\n    set sortPriority(value: number)\n    {\n        this.group.sortPriority = value;\n    }\n\n    /**\n     * The rendering {@link Layer#useRenderTexture into a render-texture} is enabled, this will return\n     * the render-texture used by this layer.\n     */\n    getRenderTexture(): RenderTexture\n    {\n        if (!this.textureCache)\n        {\n            this.textureCache = new LayerTextureCache(this);\n        }\n\n        return this.textureCache.getRenderTexture();\n    }\n\n    /**\n     * you can override this method for this particular layer, if you want\n     */\n    public doSort(): void\n    {\n        this.group.doSort(this, this._sortedChildren);\n    }\n\n    /** @override */\n    public destroy(options?: IDestroyOptions): void\n    {\n        if (this.textureCache)\n        {\n            this.textureCache.destroy();\n            this.textureCache = null;\n        }\n\n        super.destroy(options);\n    }\n\n    /** @override */\n    public render(renderer: Renderer): void\n    {\n        if (!this.prerender(renderer as any))\n        {\n            return;\n        }\n\n        if (this.group.useRenderTexture)\n        {\n            if (!this.textureCache)\n            {\n                this.textureCache = new LayerTextureCache(this);\n            }\n            this.textureCache.pushTexture(renderer);\n        }\n\n        this.containerRenderWebGL(renderer);\n        this.postrender(renderer as any);\n\n        if (this.group.useRenderTexture)\n        {\n            this.textureCache.popTexture(renderer);\n        }\n    }\n\n    /**\n     * renderCanvas named this way because of some TS mixin problem\n     * @param renderer\n     */\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    public layerRenderCanvas(renderer: any): void\n    {\n        if (this.prerender(renderer))\n        {\n            this.containerRenderCanvas(renderer);\n            this.postrender(renderer);\n        }\n    }\n\n    /**\n     * This should be called when the layer is found while traversing the scene for updating object-layer association.\n     *\n     * This is an **internal** method.\n     *\n     * @see Stage#updateStage\n     * @private\n     */\n    _onBeginLayerSubtreeTraversal(stage: Stage): void\n    {\n        // This will transfer all \"_activeChildren\" of \"this.group\" into \"this._activeChildren\". This is done\n        // because a DisplayObject in that group may be placed before the layer in the scene tree.\n\n        const active = this._activeChildren;\n\n        this._activeStageParent = stage;\n        this.group._resolveLayer(stage, this);\n        const groupChildren = this.group._activeChildren;\n\n        active.length = 0;\n        for (let i = 0; i < groupChildren.length; i++)\n        {\n            groupChildren[i]._activeParentLayer = this;\n            active.push(groupChildren[i]);\n        }\n        groupChildren.length = 0;\n    }\n\n    /**\n     * This should be called when the full subtree of the layer has been traversed while updating the stage's scene.\n     *\n     * This is an **internal** method.\n     *\n     * @see Stage#updateStage\n     * @private\n     */\n    _onEndLayerSubtreeTraversal(): void\n    {\n        const children = this.children;\n        const active = this._activeChildren;\n        const sorted = this._sortedChildren;\n\n        for (let i = 0; i < active.length; i++)\n        {\n            this.emit('display', active[i]);\n        }\n\n        sorted.length = 0;\n        if (this.insertChildrenBeforeActive)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                sorted.push(children[i]);\n            }\n        }\n        for (let i = 0; i < active.length; i++)\n        {\n            sorted.push(active[i]);\n        }\n        if (!this.insertChildrenBeforeActive\n            && this.insertChildrenAfterActive)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                sorted.push(children[i]);\n            }\n        }\n\n        if (this.group.enableSort)\n        {\n            this.doSort();\n        }\n    }\n\n    /**\n     * Prepares the renderer for this layer.\n     *\n     * It will assign {@link PIXI.Renderer#_activeLayer} to {@code this}, and set the active layer before\n     * this to {@link Layer#_activeParentLayer _activeParentLayer}. It will also temporarily sort the\n     * children by z-order.\n     *\n     * @return `true`, if the layer needs to be rendered; `false`, when the layer is invisible or has\n     * zero alpha.\n     */\n    protected prerender(renderer: ILayeredRenderer): boolean\n    {\n        // eslint-disable-next-line eqeqeq\n        if (this._activeParentLayer && this._activeParentLayer != renderer._activeLayer)\n        {\n            return false;\n        }\n\n        if (!this.visible)\n        {\n            this.displayOrder = 0;\n\n            return false;\n        }\n\n        this.displayOrder = renderer.incDisplayOrder();\n\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (this.worldAlpha <= 0 || !this.renderable)\n        {\n            return false;\n        }\n\n        // we are making a hack with swapping children, it can go wrong easily\n        // this is special \"recover\" if that allows stage to recover just after failed frame\n\n        if (this.children !== this._sortedChildren\n            && this._tempChildren !== this.children)\n        {\n            this._tempChildren = this.children;\n        }\n\n        // just a temporary feature - getBounds() for filters will work with that\n        // TODO: make a better hack for getBounds()\n\n        (this as any)._boundsID++;\n        (this as any).children = this._sortedChildren;\n\n        this._tempLayerParent = renderer._activeLayer;\n        renderer._activeLayer = this;\n\n        return true;\n    }\n\n    /**\n     * Cleans up the renderer after this layer is rendered.\n     *\n     * It restores {@link Renderer#_activeLayer} to the parent layer and restores the canonical\n     * order of children.\n     */\n    protected postrender(renderer: ILayeredRenderer): void\n    {\n        (this as any).children = this._tempChildren;\n        renderer._activeLayer = this._tempLayerParent;\n        this._tempLayerParent = null;\n    }\n}\n\n(Layer.prototype as any).renderCanvas = Layer.prototype.layerRenderCanvas;\n"],"names":["Rectangle","settings","RenderTexture","Container","Group"],"mappings":"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"}