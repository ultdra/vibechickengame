{"version":3,"file":"RendererMixin.mjs","sources":["../src/RendererMixin.ts"],"sourcesContent":["import { IRenderableObject, IRendererRenderOptions, Renderer } from '@pixi/core';\nimport { Container } from '@pixi/display';\n// import { LayersTreeSearch } from './LayersTreeSearch';\nimport { generateLayerContainerRenderMethod } from './DisplayMixin';\n\nimport type { Stage } from './Stage';\nimport type { Layer } from './Layer';\n\n/**\n * Mixin applied on {@link PIXI.Renderer} when using @pixi/layers.\n */\ninterface ILayeredRenderer\n{\n    /** Order/index of last rendered object */\n    _lastDisplayOrder: number;\n\n    /** {@link Layer} currently being rendered */\n    _activeLayer: Layer;\n\n    /** **Internal** method for updating {@link ILayeredRenderer#_lastDisplayOrder} */\n    incDisplayOrder(): number;\n\n    /** **Internal** reference to old render method */\n    _oldRender(displayObject: IRenderableObject, options?: IRendererRenderOptions): void;\n}\n\nexport type { ILayeredRenderer };\n\n/**\n * @internal\n * @ignore\n */\nfunction generateLayerRendererMethod(_oldRender: any)\n{\n    return function render(displayObject: IRenderableObject, options: any, arg1?: any, arg2?: any, arg3?: any)\n    {\n        if (!options || (!options.renderTexture && !options.baseTexture))\n        {\n            this._lastDisplayOrder = 0;\n        }\n        this._activeLayer = null;\n\n        if ((displayObject as Stage).isStage)\n        {\n            (displayObject as Stage).updateStage();\n        }\n        // if (this.plugins.interaction && !this.plugins.interaction.search.worksWithLayers)\n        // {\n        //     this.plugins.interaction.search = new LayersTreeSearch();\n        // }\n\n        _oldRender.call(this, displayObject, options, arg1, arg2, arg3);\n    };\n}\n\n/**\n * Mixes {@link ILayeredRenderer} into {@link PIXI.Renderer}.\n *\n * This is automatically done on importing @pixi/layers.\n */\nexport function applyRendererMixin(rendererClass: typeof Renderer): void\n{\n    const RendererProto = rendererClass.prototype as (Renderer & Partial<ILayeredRenderer>);\n\n    // Skip if mixin already applied.\n    if (RendererProto._oldRender)\n    {\n        return;\n    }\n\n    Object.assign(RendererProto, {\n        _lastDisplayOrder: 0,\n        _activeLayer: null,\n        incDisplayOrder()\n        {\n            return ++this._lastDisplayOrder;\n        },\n        _oldRender: Renderer.prototype.render,\n    });\n\n    RendererProto._oldRender = RendererProto.render;\n    RendererProto.render = generateLayerRendererMethod(RendererProto.render);\n}\n\n/**\n * Mixes renderer mixin + container mixin for canvas.\n *\n * If you are using PixiJS' canvas renderer, you'll need to invoke this manually.\n *\n * @example\n * import { CanvasRenderer } from '@pixi/canvas-renderer';\n * import { applyCanvasMixin } from '@pixi/layers';\n *\n * applyCanvasMixin(CanvasRenderer);\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function applyCanvasMixin(canvasRenderClass: any): void\n{\n    if (!canvasRenderClass)\n    {\n        // eslint-disable-next-line max-len,no-console\n        console.log('@pixi/layers: Canvas mixin was called with empty parameter. Are you sure that you even need this line?');\n\n        return;\n    }\n\n    applyRendererMixin(canvasRenderClass);\n\n    const ContainerProto = Container.prototype as any;\n\n    if (ContainerProto.containerRenderCanvas)\n    {\n        return;\n    }\n\n    ContainerProto.containerRenderCanvas = ContainerProto.renderCanvas;\n    ContainerProto.renderCanvas = generateLayerContainerRenderMethod(ContainerProto.renderCanvas);\n}\n\n"],"names":[],"mappings":";;;;AAgCA,SAAS,4BAA4B,UACrC,EAAA;AACI,EAAA,OAAO,SAAS,MAAO,CAAA,aAAA,EAAkC,OAAc,EAAA,IAAA,EAAY,MAAY,IAC/F,EAAA;AACI,IAAA,IAAI,CAAC,OAAY,IAAA,CAAC,QAAQ,aAAiB,IAAA,CAAC,QAAQ,WACpD,EAAA;AACI,MAAA,IAAA,CAAK,iBAAoB,GAAA,CAAA,CAAA;AAAA,KAC7B;AACA,IAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AAEpB,IAAA,IAAK,cAAwB,OAC7B,EAAA;AACI,MAAC,cAAwB,WAAY,EAAA,CAAA;AAAA,KACzC;AAMA,IAAA,UAAA,CAAW,KAAK,IAAM,EAAA,aAAA,EAAe,OAAS,EAAA,IAAA,EAAM,MAAM,IAAI,CAAA,CAAA;AAAA,GAClE,CAAA;AACJ,CAAA;AAOO,SAAS,mBAAmB,aACnC,EAAA;AACI,EAAA,MAAM,gBAAgB,aAAc,CAAA,SAAA,CAAA;AAGpC,EAAA,IAAI,cAAc,UAClB,EAAA;AACI,IAAA,OAAA;AAAA,GACJ;AAEA,EAAA,MAAA,CAAO,OAAO,aAAe,EAAA;AAAA,IACzB,iBAAmB,EAAA,CAAA;AAAA,IACnB,YAAc,EAAA,IAAA;AAAA,IACd,eACA,GAAA;AACI,MAAA,OAAO,EAAE,IAAK,CAAA,iBAAA,CAAA;AAAA,KAClB;AAAA,IACA,UAAA,EAAY,SAAS,SAAU,CAAA,MAAA;AAAA,GAClC,CAAA,CAAA;AAED,EAAA,aAAA,CAAc,aAAa,aAAc,CAAA,MAAA,CAAA;AACzC,EAAc,aAAA,CAAA,MAAA,GAAS,2BAA4B,CAAA,aAAA,CAAc,MAAM,CAAA,CAAA;AAC3E,CAAA;AAcO,SAAS,iBAAiB,iBACjC,EAAA;AACI,EAAA,IAAI,CAAC,iBACL,EAAA;AAEI,IAAA,OAAA,CAAQ,IAAI,wGAAwG,CAAA,CAAA;AAEpH,IAAA,OAAA;AAAA,GACJ;AAEA,EAAA,kBAAA,CAAmB,iBAAiB,CAAA,CAAA;AAEpC,EAAA,MAAM,iBAAiB,SAAU,CAAA,SAAA,CAAA;AAEjC,EAAA,IAAI,eAAe,qBACnB,EAAA;AACI,IAAA,OAAA;AAAA,GACJ;AAEA,EAAA,cAAA,CAAe,wBAAwB,cAAe,CAAA,YAAA,CAAA;AACtD,EAAe,cAAA,CAAA,YAAA,GAAe,kCAAmC,CAAA,cAAA,CAAe,YAAY,CAAA,CAAA;AAChG;;;;"}